#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Nov  7 12:42:35 2019

@author: n
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul 19 09:59:25 2019

This script allowes the user to input a set of images
and measure the distances between all possible pairs.
The distances are computed between original images,
and the representations that are generated by a DNN,
layer by layer.
The user can select what DNN to use,
and also select whether to use L2-metric or cosine similarity.

@author: n
"""


import argparse
import os

import numpy as np

import torch
import torch.nn as nn
import torch.nn.parallel
import torch.optim
import torch.utils.data
import torch.utils.data.distributed
import torchvision.transforms as transforms
import torchvision.models as models
try:
    from torch.hub import load_state_dict_from_url
except ImportError:
    from torch.utils.model_zoo import load_url as load_state_dict_from_url

import collections
from PIL import Image

import fnmatch

model_names = sorted(name for name in models.__dict__
    if name.islower() and not name.startswith("__")
    and callable(models.__dict__[name]))

model_urls = {
    'alexnet': 'https://download.pytorch.org/models/alexnet-owt-4df8aa71.pth',
    'resnet18': 'https://download.pytorch.org/models/resnet18-5c106cde.pth',
    'resnet34': 'https://download.pytorch.org/models/resnet34-333f7ec4.pth',
    'resnet50': 'https://download.pytorch.org/models/resnet50-19c8e357.pth',
    'resnet101': 'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth',
    'resnet152': 'https://download.pytorch.org/models/resnet152-b121ed2d.pth',
    'resnext50_32x4d': 'https://download.pytorch.org/models/resnext50_32x4d-7cdf4587.pth',
    'resnext101_32x8d': 'https://download.pytorch.org/models/resnext101_32x8d-8ba56ff5.pth',
    'wide_resnet50_2': 'https://download.pytorch.org/models/wide_resnet50_2-95faca4d.pth',
    'wide_resnet101_2': 'https://download.pytorch.org/models/wide_resnet101_2-32ee1156.pth',
}

parser = argparse.ArgumentParser(description='Image similarity')

parser.add_argument('data_dir', metavar='DIR',
                    help='path to image directory')

parser.add_argument('-a', '--arch', metavar='ARCH', default='resnet18',
                    choices=model_names,
                    help='model architecture: ' +
                        ' | '.join(model_names) +
                        ' (default: resnet18)')

parser.add_argument('--cosine_similarity', action='store_true',help='Use cosine metric or L2 metric.')

parser.add_argument('--ext', default='*.jpg', type=str,
                    help='Extension of image files.')


__all__ = ['AlexNet', 'alexnet', 'ResNet', 'resnet18', 'resnet34', 'resnet50', 'resnet101',
           'resnet152', 'resnext50_32x4d', 'resnext101_32x8d',
           'wide_resnet50_2', 'wide_resnet101_2']


class MyAlexNet(nn.Module):

    def __init__(self, num_classes=1000):
        super(MyAlexNet, self).__init__()
        self.features = nn.Sequential(
            # conv1
            nn.Conv2d(3, 64, kernel_size=11, stride=4, padding=2),#0
            nn.ReLU(inplace=True),#1
            nn.MaxPool2d(kernel_size=3, stride=2),#2
            # conv2
            nn.Conv2d(64, 192, kernel_size=5, padding=2),#3
            nn.ReLU(inplace=True),#4
            nn.MaxPool2d(kernel_size=3, stride=2),#5
            # conv3
            nn.Conv2d(192, 384, kernel_size=3, padding=1),#6
            nn.ReLU(inplace=True),#7
            # conv4
            nn.Conv2d(384, 256, kernel_size=3, padding=1),#8
            nn.ReLU(inplace=True),#9
            # conv5
            nn.Conv2d(256, 256, kernel_size=3, padding=1),#10
            nn.ReLU(inplace=True),#11
            # pool1
            nn.MaxPool2d(kernel_size=3, stride=2),#12
        )
        self.avgpool = nn.AdaptiveAvgPool2d((6, 6))
        self.classifier = nn.Sequential(
            # linear1
            nn.Dropout(),#0
            nn.Linear(256 * 6 * 6, 4096),#1
            nn.ReLU(inplace=True),#2
            # linear2
            nn.Dropout(),#3
            nn.Linear(4096, 4096),#4
            nn.ReLU(inplace=True),#5
            # linear3
            nn.Linear(4096, num_classes),#6
        )
        

    def forward(self, x):
        
        # collect layer data
        ld = collections.OrderedDict()
        
        tmp = self.features[0](x)
        tmp = self.features[1](tmp)
        tmp = self.features[2](tmp)        
        ld['conv1'] = tmp

        tmp = self.features[3](tmp)
        tmp = self.features[4](tmp)
        tmp = self.features[5](tmp)        
        ld['conv2'] = tmp

        tmp = self.features[6](tmp)
        tmp = self.features[7](tmp)
        ld['conv3'] = tmp

        tmp = self.features[8](tmp)
        tmp = self.features[9](tmp)
        ld['conv4'] = tmp

        tmp = self.features[10](tmp)
        tmp = self.features[11](tmp)
        ld['conv5'] = tmp

        tmp = self.features[12](tmp)
        ld['pool1'] = tmp

        tmp = self.avgpool(tmp)
        ld['avgpool'] = tmp
        
        tmp = torch.flatten(tmp,1)
        
        tmp = self.classifier[0](tmp)
        tmp = self.classifier[1](tmp)
        tmp = self.classifier[2](tmp)
        ld['linear1'] = tmp
        
        tmp = self.classifier[3](tmp)
        tmp = self.classifier[4](tmp)
        tmp = self.classifier[5](tmp)
        ld['linear2'] = tmp

        tmp = self.classifier[6](tmp)
        ld['linear3'] = tmp

        x = self.features(x)
        x = self.avgpool(x)
        x = torch.flatten(x, 1)
        x = self.classifier(x)
        return x, ld


def myalexnet(pretrained=False, progress=True, **kwargs):
    r"""AlexNet model architecture from the
    `"One weird trick..." <https://arxiv.org/abs/1404.5997>`_ paper.
    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
        progress (bool): If True, displays a progress bar of the download to stderr
    """
    model = MyAlexNet(**kwargs)
    if pretrained:
        state_dict = load_state_dict_from_url(model_urls['alexnet'],
                                              progress=progress)
        model.load_state_dict(state_dict)
    return model



def conv3x3(in_planes, out_planes, stride=1, groups=1, dilation=1):
    """3x3 convolution with padding"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride,
                     padding=dilation, groups=groups, bias=False, dilation=dilation)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv2d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


class BasicBlock(nn.Module):
    expansion = 1
    __constants__ = ['downsample']

    def __init__(self, inplanes, planes, stride=1, downsample=None, groups=1,
                 base_width=64, dilation=1, norm_layer=None):
        super(BasicBlock, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        if groups != 1 or base_width != 64:
            raise ValueError('BasicBlock only supports groups=1 and base_width=64')
        if dilation > 1:
            raise NotImplementedError("Dilation > 1 not supported in BasicBlock")
        # Both self.conv1 and self.downsample layers downsample the input when stride != 1
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.bn1 = norm_layer(planes)
        self.relu = nn.ReLU(inplace=True)
        self.conv2 = conv3x3(planes, planes)
        self.bn2 = norm_layer(planes)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)

        if self.downsample is not None:
            identity = self.downsample(x)

        out += identity
        out = self.relu(out)

        return out


class Bottleneck(nn.Module):
    expansion = 4
    __constants__ = ['downsample']

    def __init__(self, inplanes, planes, stride=1, downsample=None, groups=1,
                 base_width=64, dilation=1, norm_layer=None):
        super(Bottleneck, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        width = int(planes * (base_width / 64.)) * groups
        # Both self.conv2 and self.downsample layers downsample the input when stride != 1
        self.conv1 = conv1x1(inplanes, width)
        self.bn1 = norm_layer(width)
        self.conv2 = conv3x3(width, width, stride, groups, dilation)
        self.bn2 = norm_layer(width)
        self.conv3 = conv1x1(width, planes * self.expansion)
        self.bn3 = norm_layer(planes * self.expansion)
        self.relu = nn.ReLU(inplace=True)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.downsample is not None:
            identity = self.downsample(x)

        out += identity
        out = self.relu(out)

        return out


class MyResNet(nn.Module):

    def __init__(self, block, layers, num_classes=1000, zero_init_residual=False,
                 groups=1, width_per_group=64, replace_stride_with_dilation=None,
                 norm_layer=None):
        super(MyResNet, self).__init__()
        if norm_layer is None:
            norm_layer = nn.BatchNorm2d
        self._norm_layer = norm_layer

        self.inplanes = 64
        self.dilation = 1
        if replace_stride_with_dilation is None:
            # each element in the tuple indicates if we should replace
            # the 2x2 stride with a dilated convolution instead
            replace_stride_with_dilation = [False, False, False]
        if len(replace_stride_with_dilation) != 3:
            raise ValueError("replace_stride_with_dilation should be None "
                             "or a 3-element tuple, got {}".format(replace_stride_with_dilation))
        self.groups = groups
        self.base_width = width_per_group
        self.conv1 = nn.Conv2d(3, self.inplanes, kernel_size=7, stride=2, padding=3,
                               bias=False)
        self.bn1 = norm_layer(self.inplanes)
        self.relu = nn.ReLU(inplace=True)
        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        self.layer1 = self._make_layer(block, 64, layers[0])
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2,
                                       dilate=replace_stride_with_dilation[0])
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2,
                                       dilate=replace_stride_with_dilation[1])
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2,
                                       dilate=replace_stride_with_dilation[2])
        self.avgpool = nn.AdaptiveAvgPool2d((1, 1))
        self.fc = nn.Linear(512 * block.expansion, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv2d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
            elif isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)

        # Zero-initialize the last BN in each residual branch,
        # so that the residual branch starts with zeros, and each residual block behaves like an identity.
        # This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677
        if zero_init_residual:
            for m in self.modules():
                if isinstance(m, Bottleneck):
                    nn.init.constant_(m.bn3.weight, 0)
                elif isinstance(m, BasicBlock):
                    nn.init.constant_(m.bn2.weight, 0)

    def _make_layer(self, block, planes, blocks, stride=1, dilate=False):
        norm_layer = self._norm_layer
        downsample = None
        previous_dilation = self.dilation
        if dilate:
            self.dilation *= stride
            stride = 1
        if stride != 1 or self.inplanes != planes * block.expansion:
            downsample = nn.Sequential(
                conv1x1(self.inplanes, planes * block.expansion, stride),
                norm_layer(planes * block.expansion),
            )

        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample, self.groups,
                            self.base_width, previous_dilation, norm_layer))
        self.inplanes = planes * block.expansion
        for _ in range(1, blocks):
            layers.append(block(self.inplanes, planes, groups=self.groups,
                                base_width=self.base_width, dilation=self.dilation,
                                norm_layer=norm_layer))

        return nn.Sequential(*layers)

    def _forward(self, x):
        
        # collect layer data
        ld = collections.OrderedDict()
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        x = self.maxpool(x)
        ld['conv1'] = x

        x = self.layer1(x)
        ld['layer1'] = x
        x = self.layer2(x)
        ld['layer2'] = x
        x = self.layer3(x)
        ld['layer3'] = x
        x = self.layer4(x)
        ld['layer4'] = x

        x = self.avgpool(x)
        ld['last_pool'] = x
        x = torch.flatten(x, 1)
        x = self.fc(x)

        ld['output'] = x
        
        return x,ld

    # Allow for accessing forward method in a inherited class
    forward = _forward


def _resnet(arch, block, layers, pretrained, progress, **kwargs):
    model = MyResNet(block, layers, **kwargs)
    if pretrained:

        state_dict = load_state_dict_from_url(model_urls[arch],
                                              progress=progress)
        model.load_state_dict(state_dict)
    return model


def myresnet18(pretrained=False, progress=True, **kwargs):
    r"""ResNet-18 model from
    `"Deep Residual Learning for Image Recognition" <https://arxiv.org/pdf/1512.03385.pdf>`_
    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
        progress (bool): If True, displays a progress bar of the download to stderr
    """
    return _resnet('resnet18', BasicBlock, [2, 2, 2, 2], pretrained, progress,
                   **kwargs)


def myresnet34(pretrained=False, progress=True, **kwargs):
    r"""ResNet-34 model from
    `"Deep Residual Learning for Image Recognition" <https://arxiv.org/pdf/1512.03385.pdf>`_
    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
        progress (bool): If True, displays a progress bar of the download to stderr
    """
    return _resnet('resnet34', BasicBlock, [3, 4, 6, 3], pretrained, progress,
                   **kwargs)


def myresnet50(pretrained=False, progress=True, **kwargs):
    r"""ResNet-50 model from
    `"Deep Residual Learning for Image Recognition" <https://arxiv.org/pdf/1512.03385.pdf>`_
    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
        progress (bool): If True, displays a progress bar of the download to stderr
    """
    return _resnet('resnet50', Bottleneck, [3, 4, 6, 3], pretrained, progress,
                   **kwargs)


def myresnet101(pretrained=False, progress=True, **kwargs):
    r"""ResNet-101 model from
    `"Deep Residual Learning for Image Recognition" <https://arxiv.org/pdf/1512.03385.pdf>`_
    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
        progress (bool): If True, displays a progress bar of the download to stderr
    """
    return _resnet('resnet101', Bottleneck, [3, 4, 23, 3], pretrained, progress,
                   **kwargs)


def myresnet152(pretrained=False, progress=True, **kwargs):
    r"""ResNet-152 model from
    `"Deep Residual Learning for Image Recognition" <https://arxiv.org/pdf/1512.03385.pdf>`_
    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
        progress (bool): If True, displays a progress bar of the download to stderr
    """
    return _resnet('resnet152', Bottleneck, [3, 8, 36, 3], pretrained, progress,
                   **kwargs)


def myresnext50_32x4d(pretrained=False, progress=True, **kwargs):
    r"""ResNeXt-50 32x4d model from
    `"Aggregated Residual Transformation for Deep Neural Networks" <https://arxiv.org/pdf/1611.05431.pdf>`_
    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
        progress (bool): If True, displays a progress bar of the download to stderr
    """
    kwargs['groups'] = 32
    kwargs['width_per_group'] = 4
    return _resnet('resnext50_32x4d', Bottleneck, [3, 4, 6, 3],
                   pretrained, progress, **kwargs)


def myresnext101_32x8d(pretrained=False, progress=True, **kwargs):
    r"""ResNeXt-101 32x8d model from
    `"Aggregated Residual Transformation for Deep Neural Networks" <https://arxiv.org/pdf/1611.05431.pdf>`_
    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
        progress (bool): If True, displays a progress bar of the download to stderr
    """
    kwargs['groups'] = 32
    kwargs['width_per_group'] = 8
    return _resnet('resnext101_32x8d', Bottleneck, [3, 4, 23, 3],
                   pretrained, progress, **kwargs)


def mywide_resnet50_2(pretrained=False, progress=True, **kwargs):
    r"""Wide ResNet-50-2 model from
    `"Wide Residual Networks" <https://arxiv.org/pdf/1605.07146.pdf>`_
    The model is the same as ResNet except for the bottleneck number of channels
    which is twice larger in every block. The number of channels in outer 1x1
    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048
    channels, and in Wide ResNet-50-2 has 2048-1024-2048.
    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
        progress (bool): If True, displays a progress bar of the download to stderr
    """
    kwargs['width_per_group'] = 64 * 2
    return _resnet('wide_resnet50_2', Bottleneck, [3, 4, 6, 3],
                   pretrained, progress, **kwargs)


def mywide_resnet101_2(pretrained=False, progress=True, **kwargs):
    r"""Wide ResNet-101-2 model from
    `"Wide Residual Networks" <https://arxiv.org/pdf/1605.07146.pdf>`_
    The model is the same as ResNet except for the bottleneck number of channels
    which is twice larger in every block. The number of channels in outer 1x1
    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048
    channels, and in Wide ResNet-50-2 has 2048-1024-2048.
    Args:
        pretrained (bool): If True, returns a model pre-trained on ImageNet
        progress (bool): If True, displays a progress bar of the download to stderr
    """
    kwargs['width_per_group'] = 64 * 2
    return _resnet('wide_resnet101_2', Bottleneck, [3, 4, 23, 3],
                   pretrained, progress, **kwargs)




def load_image(img_path):
    
    # image size 224 for all ImageNet DNNs except for Inception_v3
    im_size = 224
    # normalize according to ImageNet
    normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],
                                     std=[0.229, 0.224, 0.225])
    tt = transforms.Compose([
            transforms.Resize((im_size,im_size)), #256
            transforms.ToTensor(),
            normalize,
        ])

    im1 = Image.open(img_path)
    im1t = tt(im1)
    im1t = im1t.unsqueeze(0)
    return im1t


def cosin_metric(x1, x2):
    return np.dot(x1, x2) / (np.linalg.norm(x1) * np.linalg.norm(x2))

def l2_metric(x1,x2):
    return np.linalg.norm(x1-x2)

class our_args:
    def __init__(self, arch, data_dir, ext, cosine_similarity):
        self.arch = arch
        self.data_dir = data_dir
        self.ext = ext
        self.cosine_similarity= cosine_similarity

def main(arch, data_dir, ext, cosine_similary):

    # args = parser.parse_args()
    args  = our_args(arch, data_dir, ext, cosine_similary)
    # create a pre-trained model
    print("creating model '{}'".format(args.arch))
    if args.arch == 'resnet18':
        model = myresnet18(pretrained=True)
    elif args.arch == 'alexnet':
        model = myalexnet(pretrained=True)
    else:
        print('ERROR: Architecture ' + args.arch + ' not supported')
        return

    # print(model)
    model.eval()
    # create an output file
    res_file_name = os.path.join(args.data_dir,'image_similarity_' + args.arch + '.csv')
    print(res_file_name)
        
    # take all images from directory
    images = sorted(fnmatch.filter(os.listdir(args.data_dir),args.ext))
    print(f"found {len(images)} images in directory {args.data_dir} the ext is {args.ext}")
    valid_images = [".jpg", ".jfif", ".png", ".tga"]
    for f in os.listdir(args.data_dir):
        ext = os.path.splitext(f)[1]
        if ext.lower() not in valid_images:
            continue
        images.append(f)
    print(f"found {len(images)} images in directory {args.data_dir}")

    with open(res_file_name,'w') as res:

        for i in range(len(images)):

            im1 = load_image(os.path.join(args.data_dir,images[i]))
            print('processing image ' + str(i) + ', ' + images[i])
            for j in range(i+1,len(images)):

                print('comparing image ' + str(j) + ', ' + images[j])

                im2 = load_image(os.path.join(args.data_dir,images[j]))
                imgs = torch.cat((im1,im2),0)

                output,ld = model(imgs)
                # write header line of res file
                if(i==0 and j==1):
                    res.write('image1,image2,raw')
                    for key in ld.keys():
                        res.write(",%s" %(str(key)))
                    res.write("\n")

                # write image names in output file
                res.write("%s,%s" %(images[i],images[j]))
                # now compute similarity:
                # first - raw image
                if not args.cosine_similarity:
                    sim = l2_metric(im1.view(-1,1).numpy(),im2.view(-1,1).numpy())
                else:
                    sim = cosin_metric(im1.view(-1,1).numpy().T,im2.view(-1,1).numpy())
                res.write(",%.3f" %(sim))
                
                # and all the layers
                for key in ld.keys():
                    if not args.cosine_similarity:
                        sim = l2_metric(ld[key][0].view(-1,1).detach().numpy(),ld[key][1].view(-1,1).detach().numpy())
                    else:
                        sim = cosin_metric(ld[key][0].view(-1,1).detach().numpy().T,ld[key][1].view(-1,1).detach().numpy())
                    res.write(",%.3f" %(sim))
                

                res.write("\n")


#
# if __name__ == '__main__':
#     main()
    
